        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 210 returned 100% blocks executed 83%
      210:    8:int compare(const void* a, const void* b) {
      210:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      210:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
       56:   12:    return -1;
      154:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 7 returned 100% blocks executed 88%
        7:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        7:   44:  SelectStream(1);
call    0 returned 100%
        7:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
        7:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        7:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       77:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
      770:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
      700:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        7:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
        7:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        7:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
        7:   89:      state->supplyCount[estate] = 8;
        7:   90:      state->supplyCount[duchy] = 8;
        7:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        7:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        7:  102:  state->supplyCount[silver] = 40;
        7:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      147:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     1155:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     1085:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
       70:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
branch  2 taken 4% (fallthrough)
branch  3 taken 96%
        -:  114:		{
       12:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        6:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
       64:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
       70:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     1015:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       21:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       14:  140:      state->deckCount[i] = 0;
       56:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       42:  143:	  state->deck[i][j] = estate;
       42:  144:	  state->deckCount[i]++;
        -:  145:	}
      112:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
       98:  148:	  state->deck[i][j] = copper;
       98:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       21:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       14:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       21:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       14:  166:      state->handCount[i] = 0;
       14:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      196:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      189:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
        7:  182:  state->outpostPlayed = 0;
        7:  183:  state->phase = 0;
        7:  184:  state->numActions = 1;
        7:  185:  state->numBuys = 1;
        7:  186:  state->playedCardCount = 0;
        7:  187:  state->whoseTurn = 0;
        7:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       42:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       35:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
        7:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
        7:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 14 returned 100% blocks executed 94%
       14:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       14:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       14:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       14:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      168:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      140:  216:    newDeck[newDeckPos] = state->deck[player][card];
      140:  217:    newDeckPos++;
      490:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      350:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      140:  221:    state->deckCount[player]--;
        -:  222:  }
      154:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      140:  224:    state->deck[player][i] = newDeck[i];
      140:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       14:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 200 returned 100% blocks executed 100%
      200:  311:int numHandCards(struct gameState *state) {
      200:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 217 returned 100% blocks executed 100%
      217:  346:int whoseTurn(struct gameState *state) {
      217:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 35 returned 100% blocks executed 100%
       35:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       35:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 11% (fallthrough)
branch  1 taken 89%
        -:  396:    {
        4:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       31:  401:  j = 0;
      806:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      775:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
        -:  405:	{
       58:  406:	  j++;
        -:  407:	}
        -:  408:    }
       31:  409:  if ( j >= 3)
branch  0 taken 45% (fallthrough)
branch  1 taken 55%
        -:  410:    {
       14:  411:      return 1;
        -:  412:    }
        -:  413:
       17:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 42 returned 100% blocks executed 38%
       42:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
       42:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
       42:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
       42:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
       42:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       42:  576:    state->deckCount[player]--;
       42:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
       42:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 28 returned 100% blocks executed 100%
       28:  583:int getCost(int cardNumber)
        -:  584:{
       28:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        1:  588:      return 0;
        -:  589:    case estate:
        1:  590:      return 2;
        -:  591:    case duchy:
        1:  592:      return 5;
        -:  593:    case province:
        1:  594:      return 8;
        -:  595:    case copper:
        1:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
        1:  602:      return 6;
        -:  603:    case council_room:
        1:  604:      return 5;
        -:  605:    case feast:
        1:  606:      return 4;
        -:  607:    case gardens:
        1:  608:      return 4;
        -:  609:    case mine:
        1:  610:      return 5;
        -:  611:    case remodel:
        1:  612:      return 4;
        -:  613:    case smithy:
        1:  614:      return 4;
        -:  615:    case village:
        1:  616:      return 3;
        -:  617:    case baron:
        1:  618:      return 4;
        -:  619:    case great_hall:
        1:  620:      return 3;
        -:  621:    case minion:
        1:  622:      return 5;
        -:  623:    case steward:
        1:  624:      return 3;
        -:  625:    case tribute:
        1:  626:      return 5;
        -:  627:    case ambassador:
        1:  628:      return 3;
        -:  629:    case cutpurse:
        1:  630:      return 4;
        -:  631:    case embargo: 
        1:  632:      return 2;
        -:  633:    case outpost:
        1:  634:      return 5;
        -:  635:    case salvager:
        1:  636:      return 4;
        -:  637:    case sea_hag:
        1:  638:      return 4;
        -:  639:    case treasure_map:
        1:  640:      return 4;
        -:  641:    }
        -:  642:	
        1:  643:  return -1;
        -:  644:}
        -:  645:
        -:  646:/*ASSIGNMENT 2 - 04/09/2018*/
        -:  647:/*Insert card functions here */
        -:  648:/*Adventurer function*/
function callAdventurer called 1 returned 100% blocks executed 83%
        1:  649:int callAdventurer(int drawntreasure, struct gameState *state, int currentPlayer, int temphand[])
        -:  650:{
        1:  651:  int z = 0;
        -:  652:  int cardDrawn;
        -:  653:
        4:  654:  while(drawntreasure<2){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        2:  655:  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  656:    shuffle(currentPlayer, state);
call    0 never executed
        -:  657:  }
        -:  658:
        -:  659:  /**BUG IMPLEMENTED**/
        -:  660:  /**cardDrawn is set equal to copper every time, not compared**/
        2:  661:  drawCard(currentPlayer, state);
call    0 returned 100%
        2:  662:  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        2:  663:  if ((cardDrawn = copper) || cardDrawn == silver || cardDrawn == gold)
        2:  664:    drawntreasure++;
        -:  665:  else{
        -:  666:    temphand[z]=cardDrawn;
        -:  667:    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  668:    z++;
        -:  669:  }
        -:  670:      }
        2:  671:      while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  672:  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:  673:  z=z-1;
        -:  674:      }
        1:  675:      return 0;
        -:  676:}
        -:  677:/*Smithy function*/
function callSmithy called 1 returned 100% blocks executed 100%
        1:  678:int callSmithy(int handPos, int currentPlayer, struct gameState *state)
        -:  679:{
        -:  680:     int i;
        -:  681:   //+3 Cards
        -:  682:
        -:  683:  /**BUG IMPLEMENTED**/
        -:  684:  /**Smithy draws 4 cards, not 3 as it should**/
        5:  685:      for (i = 0; i < 4; i++)
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        -:  686:  {
        4:  687:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  688:  }
        -:  689:      
        -:  690:      //discard card from hand
        1:  691:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  692:      return 0;
        -:  693:}
        -:  694:
function callVillage called 1 returned 100% blocks executed 100%
        1:  695:int callVillage(int handPos, int currentPlayer, struct gameState *state)
        -:  696:{
        -:  697:   //+1 Card
        1:  698:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  699:      
        -:  700:      //+2 Actions
        -:  701:
        -:  702:      /**BUG IMPLEMENTED**/
        -:  703:      /**Only 1 action is gained not 2**/
        1:  704:      state->numActions = state->numActions + 1;
        -:  705:      
        -:  706:      //discard played card from hand
        1:  707:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        1:  708:      return 0;
        -:  709:}
        -:  710:
function callSeaHag called 1 returned 100% blocks executed 100%
        1:  711:int callSeaHag(int currentPlayer, struct gameState *state)
        -:  712:{
        -:  713:  int i;
        3:  714:     for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  715:
        -:  716:  /**BUG IMPLEMENTED**/
        -:  717:  /**if statement runs if i == current player, not if i != currentplayer**/
        2:  718:  if (i == currentPlayer){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  719:    state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];          state->deckCount[i]--;
        1:  720:    state->discardCount[i]++;
        1:  721:    state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  722:  }
        -:  723:      }
        1:  724:      return 0;
        -:  725:}
        -:  726:
function callEmbargo called 0 returned 0% blocks executed 0%
    #####:  727:int callEmbargo(int handPos, int currentPlayer, struct gameState *state, int choice1)
        -:  728:{
        -:  729:     //+2 Coins
    #####:  730:      state->coins = state->coins + 2;
        -:  731:      
        -:  732:      //see if selected pile is in play
    #####:  733:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  734:  {
    #####:  735:    return -1;
        -:  736:  }
        -:  737:      
        -:  738:      //add embargo token to selected supply pile
    #####:  739:      state->embargoTokens[choice1]++;
        -:  740:      
        -:  741:      //trash card
    #####:  742:      discardCard(handPos, currentPlayer, state, 1);    
call    0 never executed
    #####:  743:      return 0;
        -:  744:}
        -:  745:
        -:  746:/*END CARD FUNCTIONS INSERTION */
        -:  747:
function cardEffect called 4 returned 100% blocks executed 4%
        4:  748:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  749:{
        -:  750:  int i;
        -:  751:  int j;
        -:  752:  int k;
        -:  753:  int x;
        -:  754:  int index;
        4:  755:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        4:  756:  int nextPlayer = currentPlayer + 1;
        -:  757:
        4:  758:  int tributeRevealedCards[2] = {-1, -1};
        -:  759:  int temphand[MAX_HAND];// moved above the if statement
        4:  760:  int drawntreasure=0;
        -:  761:  //int cardDrawn;
        -:  762:  //int z = 0;// this is the counter for the temp hand
        4:  763:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  764:    nextPlayer = 0;
        -:  765:  }
        -:  766:  
        -:  767:	
        -:  768:  //uses switch to select card and perform actions
        4:  769:  switch( card ) 
branch  0 taken 25%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 25%
branch  7 taken 25%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 25%
branch 19 taken 0%
branch 20 taken 0%
        -:  770:    {
        -:  771:    case adventurer:
        1:  772:      return callAdventurer(drawntreasure, state, currentPlayer, temphand); 
call    0 returned 100%
        -:  773:    /*
        -:  774:      while(drawntreasure<2){
        -:  775:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  776:	  shuffle(currentPlayer, state);
        -:  777:	}
        -:  778:	drawCard(currentPlayer, state);
        -:  779:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  780:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  781:	  drawntreasure++;
        -:  782:	else{
        -:  783:	  temphand[z]=cardDrawn;
        -:  784:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  785:	  z++;
        -:  786:	}
        -:  787:      }
        -:  788:      while(z-1>=0){
        -:  789:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  790:	z=z-1;
        -:  791:      }
        -:  792:      return 0;
        -:  793:			*/
        -:  794:    case council_room:
        -:  795:      //+4 Cards
    #####:  796:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  797:	{
    #####:  798:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  799:	}
        -:  800:			
        -:  801:      //+1 Buy
    #####:  802:      state->numBuys++;
        -:  803:			
        -:  804:      //Each other player draws a card
    #####:  805:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  806:	{
    #####:  807:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  808:	    {
    #####:  809:	      drawCard(i, state);
call    0 never executed
        -:  810:	    }
        -:  811:	}
        -:  812:			
        -:  813:      //put played card in played card pile
    #####:  814:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  815:			
    #####:  816:      return 0;
        -:  817:			
        -:  818:    case feast:
        -:  819:      //gain card with cost up to 5
        -:  820:      //Backup hand
    #####:  821:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  822:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  823:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  824:      }
        -:  825:      //Backup hand
        -:  826:
        -:  827:      //Update Coins for Buy
    #####:  828:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  829:      x = 1;//Condition to loop on
    #####:  830:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  831:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  832:	  if (DEBUG)
        -:  833:	    printf("None of that card left, sorry!\n");
        -:  834:
        -:  835:	  if (DEBUG){
        -:  836:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  837:	  }
        -:  838:	}
    #####:  839:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  840:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  841:
        -:  842:	  if (DEBUG){
        -:  843:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  844:	  }
        -:  845:	}
        -:  846:	else{
        -:  847:
        -:  848:	  if (DEBUG){
        -:  849:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  850:	  }
        -:  851:
    #####:  852:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  853:	  x = 0;//No more buying cards
        -:  854:
        -:  855:	  if (DEBUG){
        -:  856:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  857:	  }
        -:  858:
        -:  859:	}
        -:  860:      }     
        -:  861:
        -:  862:      //Reset Hand
    #####:  863:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  864:	state->hand[currentPlayer][i] = temphand[i];
    #####:  865:	temphand[i] = -1;
        -:  866:      }
        -:  867:      //Reset Hand
        -:  868:      			
    #####:  869:      return 0;
        -:  870:			
        -:  871:    case gardens:
    #####:  872:      return -1;
        -:  873:			
        -:  874:    case mine:
    #####:  875:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  876:
    #####:  877:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  878:	{
    #####:  879:	  return -1;
        -:  880:	}
        -:  881:		
    #####:  882:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  883:	{
    #####:  884:	  return -1;
        -:  885:	}
        -:  886:
    #####:  887:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  888:	{
    #####:  889:	  return -1;
        -:  890:	}
        -:  891:
    #####:  892:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  893:
        -:  894:      //discard card from hand
    #####:  895:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  896:
        -:  897:      //discard trashed card
    #####:  898:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  899:	{
    #####:  900:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  901:	    {
    #####:  902:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  903:	      break;
        -:  904:	    }
        -:  905:	}
        -:  906:			
    #####:  907:      return 0;
        -:  908:			
        -:  909:    case remodel:
    #####:  910:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  911:
    #####:  912:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  913:	{
    #####:  914:	  return -1;
        -:  915:	}
        -:  916:
    #####:  917:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  918:
        -:  919:      //discard card from hand
    #####:  920:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  921:
        -:  922:      //discard trashed card
    #####:  923:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  924:	{
    #####:  925:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  926:	    {
    #####:  927:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  928:	      break;
        -:  929:	    }
        -:  930:	}
        -:  931:
        -:  932:
    #####:  933:      return 0;
        -:  934:		
        -:  935:    case smithy:
        1:  936:      return callSmithy(handPos, currentPlayer, state);
call    0 returned 100%
        -:  937:    /*
        -:  938:      //+3 Cards
        -:  939:      for (i = 0; i < 3; i++)
        -:  940:	{
        -:  941:	  drawCard(currentPlayer, state);
        -:  942:	}
        -:  943:			
        -:  944:      //discard card from hand
        -:  945:      discardCard(handPos, currentPlayer, state, 0);
        -:  946:      return 0;
        -:  947:		  */
        -:  948:    case village:
        1:  949:      return callVillage(handPos, currentPlayer, state);
call    0 returned 100%
        -:  950:      /*
        -:  951:      //+1 Card
        -:  952:      drawCard(currentPlayer, state);
        -:  953:			
        -:  954:      //+2 Actions
        -:  955:      state->numActions = state->numActions + 2;
        -:  956:			
        -:  957:      //discard played card from hand
        -:  958:      discardCard(handPos, currentPlayer, state, 0);
        -:  959:      return 0;
        -:  960:      */
        -:  961:		
        -:  962:    case baron:
    #####:  963:      state->numBuys++;//Increase buys by 1!
    #####:  964:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  965:	int p = 0;//Iterator for hand!
    #####:  966:	int card_not_discarded = 1;//Flag for discard set!
    #####:  967:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  968:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  969:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  970:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  971:	    state->discardCount[currentPlayer]++;
    #####:  972:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  973:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  974:	    }
    #####:  975:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  976:	    state->handCount[currentPlayer]--;
    #####:  977:	    card_not_discarded = 0;//Exit the loop
        -:  978:	  }
    #####:  979:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  980:	    if(DEBUG) {
        -:  981:	      printf("No estate cards in your hand, invalid choice\n");
        -:  982:	      printf("Must gain an estate if there are any\n");
        -:  983:	    }
    #####:  984:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  985:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  986:	      state->supplyCount[estate]--;//Decrement estates
    #####:  987:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  988:		isGameOver(state);
call    0 never executed
        -:  989:	      }
        -:  990:	    }
    #####:  991:	    card_not_discarded = 0;//Exit the loop
        -:  992:	  }
        -:  993:			    
        -:  994:	  else{
    #####:  995:	    p++;//Next card
        -:  996:	  }
        -:  997:	}
        -:  998:      }
        -:  999:			    
        -: 1000:      else{
    #####: 1001:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1002:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####: 1003:	  state->supplyCount[estate]--;//Decrement Estates
    #####: 1004:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1005:	    isGameOver(state);
call    0 never executed
        -: 1006:	  }
        -: 1007:	}
        -: 1008:      }
        -: 1009:	    
        -: 1010:      
    #####: 1011:      return 0;
        -: 1012:		
        -: 1013:    case great_hall:
        -: 1014:      //+1 Card
    #####: 1015:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1016:			
        -: 1017:      //+1 Actions
    #####: 1018:      state->numActions++;
        -: 1019:			
        -: 1020:      //discard card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1022:      return 0;
        -: 1023:		  
        -: 1024:    case minion:
        -: 1025:      //+1 action
    #####: 1026:      state->numActions++;
        -: 1027:			
        -: 1028:      //discard card from hand
    #####: 1029:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1030:			
    #####: 1031:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1032:	{
    #####: 1033:	  state->coins = state->coins + 2;
        -: 1034:	}
        -: 1035:			
    #####: 1036:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1037:	{
        -: 1038:	  //discard hand
    #####: 1039:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1040:	    {
    #####: 1041:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1042:	    }
        -: 1043:				
        -: 1044:	  //draw 4
    #####: 1045:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1046:	    {
    #####: 1047:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1048:	    }
        -: 1049:				
        -: 1050:	  //other players discard hand and redraw if hand size > 4
    #####: 1051:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1052:	    {
    #####: 1053:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1054:		{
    #####: 1055:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1056:		    {
        -: 1057:		      //discard hand
    #####: 1058:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1059:			{
    #####: 1060:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1061:			}
        -: 1062:							
        -: 1063:		      //draw 4
    #####: 1064:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1065:			{
    #####: 1066:			  drawCard(i, state);
call    0 never executed
        -: 1067:			}
        -: 1068:		    }
        -: 1069:		}
        -: 1070:	    }
        -: 1071:				
        -: 1072:	}
    #####: 1073:      return 0;
        -: 1074:		
        -: 1075:    case steward:
    #####: 1076:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1077:	{
        -: 1078:	  //+2 cards
    #####: 1079:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1080:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1081:	}
    #####: 1082:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1083:	{
        -: 1084:	  //+2 coins
    #####: 1085:	  state->coins = state->coins + 2;
        -: 1086:	}
        -: 1087:      else
        -: 1088:	{
        -: 1089:	  //trash 2 cards in hand
    #####: 1090:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1091:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1092:	}
        -: 1093:			
        -: 1094:      //discard card from hand
    #####: 1095:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1096:      return 0;
        -: 1097:		
        -: 1098:    case tribute:
    #####: 1099:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1100:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1101:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1102:	  state->deckCount[nextPlayer]--;
        -: 1103:	}
    #####: 1104:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1105:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1106:	  state->discardCount[nextPlayer]--;
        -: 1107:	}
        -: 1108:	else{
        -: 1109:	  //No Card to Reveal
        -: 1110:	  if (DEBUG){
        -: 1111:	    printf("No cards to reveal\n");
        -: 1112:	  }
        -: 1113:	}
        -: 1114:      }
        -: 1115:	    
        -: 1116:      else{
    #####: 1117:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1118:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1119:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1120:	    state->deckCount[nextPlayer]++;
    #####: 1121:	    state->discard[nextPlayer][i] = -1;
    #####: 1122:	    state->discardCount[nextPlayer]--;
        -: 1123:	  }
        -: 1124:			    
    #####: 1125:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1126:	} 
    #####: 1127:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1128:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1129:	state->deckCount[nextPlayer]--;
    #####: 1130:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1131:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1132:	state->deckCount[nextPlayer]--;
        -: 1133:      }    
        -: 1134:		       
    #####: 1135:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1136:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1137:	state->playedCardCount++;
    #####: 1138:	tributeRevealedCards[1] = -1;
        -: 1139:      }
        -: 1140:
    #####: 1141:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1142:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1143:	  state->coins += 2;
        -: 1144:	}
        -: 1145:		    
    #####: 1146:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1147:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1148:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1149:	}
        -: 1150:	else{//Action Card
    #####: 1151:	  state->numActions = state->numActions + 2;
        -: 1152:	}
        -: 1153:      }
        -: 1154:	    
    #####: 1155:      return 0;
        -: 1156:		
        -: 1157:    case ambassador:
    #####: 1158:      j = 0;		//used to check if player has enough cards to discard
        -: 1159:
    #####: 1160:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1161:	{
    #####: 1162:	  return -1;				
        -: 1163:	}
        -: 1164:
    #####: 1165:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1166:	{
    #####: 1167:	  return -1;
        -: 1168:	}
        -: 1169:
    #####: 1170:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1171:	{
    #####: 1172:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1173:	    {
    #####: 1174:	      j++;
        -: 1175:	    }
        -: 1176:	}
    #####: 1177:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1178:	{
    #####: 1179:	  return -1;				
        -: 1180:	}
        -: 1181:
        -: 1182:      if (DEBUG) 
        -: 1183:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1184:
        -: 1185:      //increase supply count for choosen card by amount being discarded
    #####: 1186:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1187:			
        -: 1188:      //each other player gains a copy of revealed card
    #####: 1189:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1190:	{
    #####: 1191:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1192:	    {
    #####: 1193:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1194:	    }
        -: 1195:	}
        -: 1196:
        -: 1197:      //discard played card from hand
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1199:
        -: 1200:      //trash copies of cards returned to supply
    #####: 1201:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1202:	{
    #####: 1203:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1204:	    {
    #####: 1205:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1206:		{
    #####: 1207:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1208:		  break;
        -: 1209:		}
        -: 1210:	    }
        -: 1211:	}			
        -: 1212:
    #####: 1213:      return 0;
        -: 1214:		
        -: 1215:    case cutpurse:
        -: 1216:
    #####: 1217:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1218:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1219:	{
    #####: 1220:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1221:	    {
    #####: 1222:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1223:		{
    #####: 1224:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1225:		    {
    #####: 1226:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1227:		      break;
        -: 1228:		    }
    #####: 1229:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1230:		    {
    #####: 1231:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1232:			{
        -: 1233:			  if (DEBUG)
        -: 1234:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1235:			}	
    #####: 1236:		      break;
        -: 1237:		    }		
        -: 1238:		}
        -: 1239:					
        -: 1240:	    }
        -: 1241:				
        -: 1242:	}				
        -: 1243:
        -: 1244:      //discard played card from hand
    #####: 1245:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1246:
    #####: 1247:      return 0;
        -: 1248:
        -: 1249:		
        -: 1250:    case embargo: 
    #####: 1251:      return callEmbargo(handPos, currentPlayer, state, choice1);
call    0 never executed
        -: 1252:      /*
        -: 1253:      //+2 Coins
        -: 1254:      state->coins = state->coins + 2;
        -: 1255:			
        -: 1256:      //see if selected pile is in play
        -: 1257:      if ( state->supplyCount[choice1] == -1 )
        -: 1258:	{
        -: 1259:	  return -1;
        -: 1260:	}
        -: 1261:			
        -: 1262:      //add embargo token to selected supply pile
        -: 1263:      state->embargoTokens[choice1]++;
        -: 1264:			
        -: 1265:      //trash card
        -: 1266:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1267:      return 0;
        -: 1268:		  */
        -: 1269:
        -: 1270:    case outpost:
        -: 1271:      //set outpost flag
    #####: 1272:      state->outpostPlayed++;
        -: 1273:			
        -: 1274:      //discard card
    #####: 1275:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1276:      return 0;
        -: 1277:		
        -: 1278:    case salvager:
        -: 1279:      //+1 buy
    #####: 1280:      state->numBuys++;
        -: 1281:			
    #####: 1282:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1283:	{
        -: 1284:	  //gain coins equal to trashed card
    #####: 1285:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1286:	  //trash card
    #####: 1287:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1288:	}
        -: 1289:			
        -: 1290:      //discard card
    #####: 1291:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1292:      return 0;
        -: 1293:		
        -: 1294:    case sea_hag:
        1: 1295:      return callSeaHag(currentPlayer, state);
call    0 returned 100%
        -: 1296:      /*
        -: 1297:      for (i = 0; i < state->numPlayers; i++){
        -: 1298:	if (i != currentPlayer){
        -: 1299:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
        -: 1300:	  state->discardCount[i]++;
        -: 1301:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1302:	}
        -: 1303:      }
        -: 1304:      return 0;
        -: 1305:		  */
        -: 1306:    case treasure_map:
        -: 1307:      //search hand for another treasure_map
    #####: 1308:      index = -1;
    #####: 1309:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1310:	{
    #####: 1311:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1312:	    {
    #####: 1313:	      index = i;
    #####: 1314:	      break;
        -: 1315:	    }
        -: 1316:	}
    #####: 1317:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1318:	{
        -: 1319:	  //trash both treasure cards
    #####: 1320:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1321:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1322:
        -: 1323:	  //gain 4 Gold cards
    #####: 1324:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1325:	    {
    #####: 1326:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1327:	    }
        -: 1328:				
        -: 1329:	  //return success
    #####: 1330:	  return 1;
        -: 1331:	}
        -: 1332:			
        -: 1333:      //no second treasure_map found in hand
    #####: 1334:      return -1;
        -: 1335:    }
        -: 1336:	
    #####: 1337:  return -1;
        -: 1338:}
        -: 1339:
function discardCard called 2 returned 100% blocks executed 78%
        2: 1340:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1341:{
        -: 1342:	
        -: 1343:  //if card is not trashed, added to Played pile 
        2: 1344:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1345:    {
        -: 1346:      //add card to played pile
        2: 1347:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1348:      state->playedCardCount++;
        -: 1349:    }
        -: 1350:	
        -: 1351:  //set played card to -1
        2: 1352:  state->hand[currentPlayer][handPos] = -1;
        -: 1353:	
        -: 1354:  //remove card from player's hand
        2: 1355:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1356:    {
        -: 1357:      //reduce number of cards in hand
    #####: 1358:      state->handCount[currentPlayer]--;
        -: 1359:    }
        2: 1360:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1361:    {
        -: 1362:      //reduce number of cards in hand
    #####: 1363:      state->handCount[currentPlayer]--;
        -: 1364:    }
        -: 1365:  else 	
        -: 1366:    {
        -: 1367:      //replace discarded card with last card in hand
        2: 1368:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1369:      //set last card to -1
        2: 1370:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1371:      //reduce number of cards in hand
        2: 1372:      state->handCount[currentPlayer]--;
        -: 1373:    }
        -: 1374:	
        2: 1375:  return 0;
        -: 1376:}
        -: 1377:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1378:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1379:{
        -: 1380:  //Note: supplyPos is enum of choosen card
        -: 1381:	
        -: 1382:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1383:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1384:    {
    #####: 1385:      return -1;
        -: 1386:    }
        -: 1387:	
        -: 1388:  //added card for [whoseTurn] current player:
        -: 1389:  // toFlag = 0 : add to discard
        -: 1390:  // toFlag = 1 : add to deck
        -: 1391:  // toFlag = 2 : add to hand
        -: 1392:
    #####: 1393:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1394:    {
    #####: 1395:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1396:      state->deckCount[player]++;
        -: 1397:    }
    #####: 1398:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1399:    {
    #####: 1400:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1401:      state->handCount[player]++;
        -: 1402:    }
        -: 1403:  else
        -: 1404:    {
    #####: 1405:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1406:      state->discardCount[player]++;
        -: 1407:    }
        -: 1408:	
        -: 1409:  //decrease number in supply pile
    #####: 1410:  state->supplyCount[supplyPos]--;
        -: 1411:	 
    #####: 1412:  return 0;
        -: 1413:}
        -: 1414:
function updateCoins called 7 returned 100% blocks executed 82%
        7: 1415:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1416:{
        -: 1417:  int i;
        -: 1418:	
        -: 1419:  //reset coin count
        7: 1420:  state->coins = 0;
        -: 1421:
        -: 1422:  //add coins for each Treasure card in player's hand
       42: 1423:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1424:    {
       35: 1425:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1426:	{
       28: 1427:	  state->coins += 1;
        -: 1428:	}
        7: 1429:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1430:	{
    #####: 1431:	  state->coins += 2;
        -: 1432:	}
        7: 1433:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1434:	{
    #####: 1435:	  state->coins += 3;
        -: 1436:	}	
        -: 1437:    }	
        -: 1438:
        -: 1439:  //add bonus
        7: 1440:  state->coins += bonus;
        -: 1441:
        7: 1442:  return 0;
        -: 1443:}
        -: 1444:
        -: 1445:
        -: 1446://end of dominion.c
        -: 1447:
